def Conv2Float(Lst):    '''Fonction qui va convertir une liste de 32 bits en nombre reel (flottant) en s'appuyant sur la norme IEE-754 en simple precision'''    # On initialise les variables de travail    exposant = 0    mantisse = 0.0 #(c'est un nombre reel compris entre 0 et 1)    # On fixe tout d'abord le signe - bit de poids fort, le plus a gauche, donc element 0 de la liste    signe = Lst[0]    # On effectue ensuite les calculs de l'exposant. On sait qu'ils sont codes sur 8 bits, du 2eme au 9eme, donc des indices 1 a 8. Correspondance indice <-> puissance: indice 1 <-> puissance 7 de 2; 2 <-> 6; (...); 8 <-> 0.    for i in range(1,9):        exposant += Lst[i] * 2 ** (8 - i)    # On applique le decalage sur 32 bits, qui est de 127    exposant -= 127 # (cette syntaxe est equivalente a "exposant = exposant - 127")    # On calcule enfin la mantisse, sur les bits restants, donc d'indice 9 a 31. Correspondance indice <-> puissance: indice 9 <-> puissance (-1) de 2; 10 <-> (-2); (...); 31 <-> (-23).    for i in range(9, 32):        mantisse += Lst[i] * 2 ** (8 - i)    # Ne reste qu'a calculer le resultat en utilisant la formule vue en cours: [(-1) ** signe] * [1 + mantisse] * [2 ** exposant]    resultat = ((-1) ** signe) * (1 + mantisse) * (2 ** exposant)    return resultat# Exemples de test:# Exercice 19.a - resultat = 6.625liste = [0,1,0,0,0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]print(Conv2Float(liste))# Exercice 19.b - resultat = -0,484375liste = [1,0,1,1,1,1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]print(Conv2Float(liste))# Et un dernier exemple de test que vous devriez reconnaitre...liste = [0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,1,1,1,1,1,1,0,1,1,0,1,1]print(Conv2Float(liste))